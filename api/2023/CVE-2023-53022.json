{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-03-27T00:00:00Z",
  "bugzilla": {
    "description": "kernel: net: enetc: avoid deadlock in enetc_tx_onestep_tstamp()",
    "id": "2355501",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2355501"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-833",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2023-53022",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nnet: enetc: avoid deadlock in enetc_tx_onestep_tstamp()\nThis lockdep splat says it better than I could:\n================================\nWARNING: inconsistent lock state\n6.2.0-rc2-07010-ga9b9500ffaac-dirty #967 Not tainted\n--------------------------------\ninconsistent {IN-SOFTIRQ-W} -\u003e {SOFTIRQ-ON-W} usage.\nkworker/1:3/179 [HC0[0]:SC0[0]:HE1:SE1] takes:\nffff3ec4036ce098 (_xmit_ETHER#2){+.?.}-{3:3}, at: netif_freeze_queues+0x5c/0xc0\n{IN-SOFTIRQ-W} state was registered at:\n_raw_spin_lock+0x5c/0xc0\nsch_direct_xmit+0x148/0x37c\n__dev_queue_xmit+0x528/0x111c\nip6_finish_output2+0x5ec/0xb7c\nip6_finish_output+0x240/0x3f0\nip6_output+0x78/0x360\nndisc_send_skb+0x33c/0x85c\nndisc_send_rs+0x54/0x12c\naddrconf_rs_timer+0x154/0x260\ncall_timer_fn+0xb8/0x3a0\n__run_timers.part.0+0x214/0x26c\nrun_timer_softirq+0x3c/0x74\n__do_softirq+0x14c/0x5d8\n____do_softirq+0x10/0x20\ncall_on_irq_stack+0x2c/0x5c\ndo_softirq_own_stack+0x1c/0x30\n__irq_exit_rcu+0x168/0x1a0\nirq_exit_rcu+0x10/0x40\nel1_interrupt+0x38/0x64\nirq event stamp: 7825\nhardirqs last  enabled at (7825): [\u003cffffdf1f7200cae4\u003e] exit_to_kernel_mode+0x34/0x130\nhardirqs last disabled at (7823): [\u003cffffdf1f708105f0\u003e] __do_softirq+0x550/0x5d8\nsoftirqs last  enabled at (7824): [\u003cffffdf1f7081050c\u003e] __do_softirq+0x46c/0x5d8\nsoftirqs last disabled at (7811): [\u003cffffdf1f708166e0\u003e] ____do_softirq+0x10/0x20\nother info that might help us debug this:\nPossible unsafe locking scenario:\nCPU0\n----\nlock(_xmit_ETHER#2);\n\u003cInterrupt\u003e\nlock(_xmit_ETHER#2);\n*** DEADLOCK ***\n3 locks held by kworker/1:3/179:\n#0: ffff3ec400004748 ((wq_completion)events){+.+.}-{0:0}, at: process_one_work+0x1f4/0x6c0\n#1: ffff80000a0bbdc8 ((work_completion)(\u0026priv-\u003etx_onestep_tstamp)){+.+.}-{0:0}, at: process_one_work+0x1f4/0x6c0\n#2: ffff3ec4036cd438 (\u0026dev-\u003etx_global_lock){+.+.}-{3:3}, at: netif_tx_lock+0x1c/0x34\nWorkqueue: events enetc_tx_onestep_tstamp\nCall trace:\nprint_usage_bug.part.0+0x208/0x22c\nmark_lock+0x7f0/0x8b0\n__lock_acquire+0x7c4/0x1ce0\nlock_acquire.part.0+0xe0/0x220\nlock_acquire+0x68/0x84\n_raw_spin_lock+0x5c/0xc0\nnetif_freeze_queues+0x5c/0xc0\nnetif_tx_lock+0x24/0x34\nenetc_tx_onestep_tstamp+0x20/0x100\nprocess_one_work+0x28c/0x6c0\nworker_thread+0x74/0x450\nkthread+0x118/0x11c\nbut I'll say it anyway: the enetc_tx_onestep_tstamp() work item runs in\nprocess context, therefore with softirqs enabled (i.o.w., it can be\ninterrupted by a softirq). If we hold the netif_tx_lock() when there is\nan interrupt, and the NET_TX softirq then gets scheduled, this will take\nthe netif_tx_lock() a second time and deadlock the kernel.\nTo solve this, use netif_tx_lock_bh(), which blocks softirqs from\nrunning."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2023-53022\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-53022\nhttps://lore.kernel.org/linux-cve-announce/2025032718-CVE-2023-53022-b539@gregkh/T"
  ]
}