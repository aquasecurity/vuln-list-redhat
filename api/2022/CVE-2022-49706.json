{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-02-26T00:00:00Z",
  "bugzilla": {
    "description": "kernel: zonefs: fix zonefs_iomap_begin() for reads",
    "id": "2347845",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2347845"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2022-49706",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nzonefs: fix zonefs_iomap_begin() for reads\nIf a readahead is issued to a sequential zone file with an offset\nexactly equal to the current file size, the iomap type is set to\nIOMAP_UNWRITTEN, which will prevent an IO, but the iomap length is\ncalculated as 0. This causes a WARN_ON() in iomap_iter():\n[17309.548939] WARNING: CPU: 3 PID: 2137 at fs/iomap/iter.c:34 iomap_iter+0x9cf/0xe80\n[...]\n[17309.650907] RIP: 0010:iomap_iter+0x9cf/0xe80\n[...]\n[17309.754560] Call Trace:\n[17309.757078]  \u003cTASK\u003e\n[17309.759240]  ? lock_is_held_type+0xd8/0x130\n[17309.763531]  iomap_readahead+0x1a8/0x870\n[17309.767550]  ? iomap_read_folio+0x4c0/0x4c0\n[17309.771817]  ? lockdep_hardirqs_on_prepare+0x400/0x400\n[17309.778848]  ? lock_release+0x370/0x750\n[17309.784462]  ? folio_add_lru+0x217/0x3f0\n[17309.790220]  ? reacquire_held_locks+0x4e0/0x4e0\n[17309.796543]  read_pages+0x17d/0xb60\n[17309.801854]  ? folio_add_lru+0x238/0x3f0\n[17309.807573]  ? readahead_expand+0x5f0/0x5f0\n[17309.813554]  ? policy_node+0xb5/0x140\n[17309.819018]  page_cache_ra_unbounded+0x27d/0x450\n[17309.825439]  filemap_get_pages+0x500/0x1450\n[17309.831444]  ? filemap_add_folio+0x140/0x140\n[17309.837519]  ? lock_is_held_type+0xd8/0x130\n[17309.843509]  filemap_read+0x28c/0x9f0\n[17309.848953]  ? zonefs_file_read_iter+0x1ea/0x4d0 [zonefs]\n[17309.856162]  ? trace_contention_end+0xd6/0x130\n[17309.862416]  ? __mutex_lock+0x221/0x1480\n[17309.868151]  ? zonefs_file_read_iter+0x166/0x4d0 [zonefs]\n[17309.875364]  ? filemap_get_pages+0x1450/0x1450\n[17309.881647]  ? __mutex_unlock_slowpath+0x15e/0x620\n[17309.888248]  ? wait_for_completion_io_timeout+0x20/0x20\n[17309.895231]  ? lock_is_held_type+0xd8/0x130\n[17309.901115]  ? lock_is_held_type+0xd8/0x130\n[17309.906934]  zonefs_file_read_iter+0x356/0x4d0 [zonefs]\n[17309.913750]  new_sync_read+0x2d8/0x520\n[17309.919035]  ? __x64_sys_lseek+0x1d0/0x1d0\nFurthermore, this causes iomap_readahead() to loop forever as\niomap_readahead_iter() always returns 0, making no progress.\nFix this by treating reads after the file size as access to holes,\nsetting the iomap type to IOMAP_HOLE, the iomap addr to IOMAP_NULL_ADDR\nand using the length argument as is for the iomap length. To simplify\nthe code with this change, zonefs_iomap_begin() is split into the read\nvariant, zonefs_read_iomap_begin() and zonefs_read_iomap_ops, and the\nwrite variant, zonefs_write_iomap_begin() and zonefs_write_iomap_ops."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2022-49706\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-49706\nhttps://lore.kernel.org/linux-cve-announce/2025022630-CVE-2022-49706-eed8@gregkh/T"
  ]
}