{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-02-26T00:00:00Z",
  "bugzilla": {
    "description": "kernel: blk-iolatency: Fix inflight count imbalances and IO hangs on offline",
    "id": "2347830",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2347830"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2022-49394",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nblk-iolatency: Fix inflight count imbalances and IO hangs on offline\niolatency needs to track the number of inflight IOs per cgroup. As this\ntracking can be expensive, it is disabled when no cgroup has iolatency\nconfigured for the device. To ensure that the inflight counters stay\nbalanced, iolatency_set_limit() freezes the request_queue while manipulating\nthe enabled counter, which ensures that no IO is in flight and thus all\ncounters are zero.\nUnfortunately, iolatency_set_limit() isn't the only place where the enabled\ncounter is manipulated. iolatency_pd_offline() can also dec the counter and\ntrigger disabling. As this disabling happens without freezing the q, this\ncan easily happen while some IOs are in flight and thus leak the counts.\nThis can be easily demonstrated by turning on iolatency on an one empty\ncgroup while IOs are in flight in other cgroups and then removing the\ncgroup. Note that iolatency shouldn't have been enabled elsewhere in the\nsystem to ensure that removing the cgroup disables iolatency for the whole\ndevice.\nThe following keeps flipping on and off iolatency on sda:\necho +io \u003e /sys/fs/cgroup/cgroup.subtree_control\nwhile true; do\nmkdir -p /sys/fs/cgroup/test\necho '8:0 target=100000' \u003e /sys/fs/cgroup/test/io.latency\nsleep 1\nrmdir /sys/fs/cgroup/test\nsleep 1\ndone\nand there's concurrent fio generating direct rand reads:\nfio --name test --filename=/dev/sda --direct=1 --rw=randread \\\n--runtime=600 --time_based --iodepth=256 --numjobs=4 --bs=4k\nwhile monitoring with the following drgn script:\nwhile True:\nfor css in css_for_each_descendant_pre(prog['blkcg_root'].css.address_of_()):\nfor pos in hlist_for_each(container_of(css, 'struct blkcg', 'css').blkg_list):\nblkg = container_of(pos, 'struct blkcg_gq', 'blkcg_node')\npd = blkg.pd[prog['blkcg_policy_iolatency'].plid]\nif pd.value_() == 0:\ncontinue\niolat = container_of(pd, 'struct iolatency_grp', 'pd')\ninflight = iolat.rq_wait.inflight.counter.value_()\nif inflight:\nprint(f'inflight={inflight} {disk_name(blkg.q.disk).decode(\"utf-8\")} '\nf'{cgroup_path(css.cgroup).decode(\"utf-8\")}')\ntime.sleep(1)\nThe monitoring output looks like the following:\ninflight=1 sda /user.slice\ninflight=1 sda /user.slice\n...\ninflight=14 sda /user.slice\ninflight=13 sda /user.slice\ninflight=17 sda /user.slice\ninflight=15 sda /user.slice\ninflight=18 sda /user.slice\ninflight=17 sda /user.slice\ninflight=20 sda /user.slice\ninflight=19 sda /user.slice \u003c- fio stopped, inflight stuck at 19\ninflight=19 sda /user.slice\ninflight=19 sda /user.slice\nIf a cgroup with stuck inflight ends up getting throttled, the throttled IOs\nwill never get issued as there's no completion event to wake it up leading\nto an indefinite hang.\nThis patch fixes the bug by unifying enable handling into a work item which\nis automatically kicked off from iolatency_set_min_lat_nsec() which is\ncalled from both iolatency_set_limit() and iolatency_pd_offline() paths.\nPunting to a work item is necessary as iolatency_pd_offline() is called\nunder spinlocks while freezing a request_queue requires a sleepable context.\nThis also simplifies the code reducing LOC sans the comments and avoids the\nunnecessary freezes which were happening whenever a cgroup's latency target\nis newly set or cleared."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2022-49394\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-49394\nhttps://lore.kernel.org/linux-cve-announce/2025022649-CVE-2022-49394-bcce@gregkh/T"
  ]
}