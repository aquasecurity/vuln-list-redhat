{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Will not fix",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Will not fix",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Will not fix",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-09-04T00:00:00Z",
  "bugzilla": {
    "description": "kernel: driver core: Fix uevent_show() vs driver detach race",
    "id": "2309783",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2309783"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-667",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-44952",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\ndriver core: Fix uevent_show() vs driver detach race\nuevent_show() wants to de-reference dev-\u003edriver-\u003ename. There is no clean\nway for a device attribute to de-reference dev-\u003edriver unless that\nattribute is defined via (struct device_driver).dev_groups. Instead, the\nanti-pattern of taking the device_lock() in the attribute handler risks\ndeadlocks with code paths that remove device attributes while holding\nthe lock.\nThis deadlock is typically invisible to lockdep given the device_lock()\nis marked lockdep_set_novalidate_class(), but some subsystems allocate a\nlocal lockdep key for @dev-\u003emutex to reveal reports of the form:\n======================================================\nWARNING: possible circular locking dependency detected\n6.10.0-rc7+ #275 Tainted: G           OE    N\n------------------------------------------------------\nmodprobe/2374 is trying to acquire lock:\nffff8c2270070de0 (kn-\u003eactive#6){++++}-{0:0}, at: __kernfs_remove+0xde/0x220\nbut task is already holding lock:\nffff8c22016e88f8 (\u0026cxl_root_key){+.+.}-{3:3}, at: device_release_driver_internal+0x39/0x210\nwhich lock already depends on the new lock.\nthe existing dependency chain (in reverse order) is:\n-\u003e #1 (\u0026cxl_root_key){+.+.}-{3:3}:\n__mutex_lock+0x99/0xc30\nuevent_show+0xac/0x130\ndev_attr_show+0x18/0x40\nsysfs_kf_seq_show+0xac/0xf0\nseq_read_iter+0x110/0x450\nvfs_read+0x25b/0x340\nksys_read+0x67/0xf0\ndo_syscall_64+0x75/0x190\nentry_SYSCALL_64_after_hwframe+0x76/0x7e\n-\u003e #0 (kn-\u003eactive#6){++++}-{0:0}:\n__lock_acquire+0x121a/0x1fa0\nlock_acquire+0xd6/0x2e0\nkernfs_drain+0x1e9/0x200\n__kernfs_remove+0xde/0x220\nkernfs_remove_by_name_ns+0x5e/0xa0\ndevice_del+0x168/0x410\ndevice_unregister+0x13/0x60\ndevres_release_all+0xb8/0x110\ndevice_unbind_cleanup+0xe/0x70\ndevice_release_driver_internal+0x1c7/0x210\ndriver_detach+0x47/0x90\nbus_remove_driver+0x6c/0xf0\ncxl_acpi_exit+0xc/0x11 [cxl_acpi]\n__do_sys_delete_module.isra.0+0x181/0x260\ndo_syscall_64+0x75/0x190\nentry_SYSCALL_64_after_hwframe+0x76/0x7e\nThe observation though is that driver objects are typically much longer\nlived than device objects. It is reasonable to perform lockless\nde-reference of a @driver pointer even if it is racing detach from a\ndevice. Given the infrequency of driver unregistration, use\nsynchronize_rcu() in module_remove_driver() to close any potential\nraces.  It is potentially overkill to suffer synchronize_rcu() just to\nhandle the rare module removal racing uevent_show() event.\nThanks to Tetsuo Handa for the debug analysis of the syzbot report [1]."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-44952\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-44952\nhttps://lore.kernel.org/linux-cve-announce/2024090411-CVE-2024-44952-6290@gregkh/T"
  ]
}