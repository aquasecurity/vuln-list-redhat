{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Low",
  "public_date": "2024-09-18T00:00:00Z",
  "bugzilla": {
    "description": "kernel: btrfs: fix race between direct IO write and fsync when using same fd",
    "id": "2313082",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2313082"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-362",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-46734",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nbtrfs: fix race between direct IO write and fsync when using same fd\nIf we have 2 threads that are using the same file descriptor and one of\nthem is doing direct IO writes while the other is doing fsync, we have a\nrace where we can end up either:\n1) Attempt a fsync without holding the inode's lock, triggering an\nassertion failures when assertions are enabled;\n2) Do an invalid memory access from the fsync task because the file private\npoints to memory allocated on stack by the direct IO task and it may be\nused by the fsync task after the stack was destroyed.\nThe race happens like this:\n1) A user space program opens a file descriptor with O_DIRECT;\n2) The program spawns 2 threads using libpthread for example;\n3) One of the threads uses the file descriptor to do direct IO writes,\nwhile the other calls fsync using the same file descriptor.\n4) Call task A the thread doing direct IO writes and task B the thread\ndoing fsyncs;\n5) Task A does a direct IO write, and at btrfs_direct_write() sets the\nfile's private to an on stack allocated private with the member\n'fsync_skip_inode_lock' set to true;\n6) Task B enters btrfs_sync_file() and sees that there's a private\nstructure associated to the file which has 'fsync_skip_inode_lock' set\nto true, so it skips locking the inode's VFS lock;\n7) Task A completes the direct IO write, and resets the file's private to\nNULL since it had no prior private and our private was stack allocated.\nThen it unlocks the inode's VFS lock;\n8) Task B enters btrfs_get_ordered_extents_for_logging(), then the\nassertion that checks the inode's VFS lock is held fails, since task B\nnever locked it and task A has already unlocked it.\nThe stack trace produced is the following:\nassertion failed: inode_is_locked(\u0026inode-\u003evfs_inode), in fs/btrfs/ordered-data.c:983\n------------[ cut here ]------------\nkernel BUG at fs/btrfs/ordered-data.c:983!\nOops: invalid opcode: 0000 [#1] PREEMPT SMP PTI\nCPU: 9 PID: 5072 Comm: worker Tainted: G     U     OE      6.10.5-1-default #1 openSUSE Tumbleweed 69f48d427608e1c09e60ea24c6c55e2ca1b049e8\nHardware name: Acer Predator PH315-52/Covini_CFS, BIOS V1.12 07/28/2020\nRIP: 0010:btrfs_get_ordered_extents_for_logging.cold+0x1f/0x42 [btrfs]\nCode: 50 d6 86 c0 e8 (...)\nRSP: 0018:ffff9e4a03dcfc78 EFLAGS: 00010246\nRAX: 0000000000000054 RBX: ffff9078a9868e98 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: ffff907dce4a7800 RDI: ffff907dce4a7800\nRBP: ffff907805518800 R08: 0000000000000000 R09: ffff9e4a03dcfb38\nR10: ffff9e4a03dcfb30 R11: 0000000000000003 R12: ffff907684ae7800\nR13: 0000000000000001 R14: ffff90774646b600 R15: 0000000000000000\nFS:  00007f04b96006c0(0000) GS:ffff907dce480000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007f32acbfc000 CR3: 00000001fd4fa005 CR4: 00000000003726f0\nCall Trace:\n\u003cTASK\u003e\n? __die_body.cold+0x14/0x24\n? die+0x2e/0x50\n? do_trap+0xca/0x110\n? do_error_trap+0x6a/0x90\n? btrfs_get_ordered_extents_for_logging.cold+0x1f/0x42 [btrfs bb26272d49b4cdc847cf3f7faadd459b62caee9a]\n? exc_invalid_op+0x50/0x70\n? btrfs_get_ordered_extents_for_logging.cold+0x1f/0x42 [btrfs bb26272d49b4cdc847cf3f7faadd459b62caee9a]\n? asm_exc_invalid_op+0x1a/0x20\n? btrfs_get_ordered_extents_for_logging.cold+0x1f/0x42 [btrfs bb26272d49b4cdc847cf3f7faadd459b62caee9a]\n? btrfs_get_ordered_extents_for_logging.cold+0x1f/0x42 [btrfs bb26272d49b4cdc847cf3f7faadd459b62caee9a]\nbtrfs_sync_file+0x21a/0x4d0 [btrfs bb26272d49b4cdc847cf3f7faadd459b62caee9a]\n? __seccomp_filter+0x31d/0x4f0\n__x64_sys_fdatasync+0x4f/0x90\ndo_syscall_64+0x82/0x160\n? do_futex+0xcb/0x190\n? __x64_sys_futex+0x10e/0x1d0\n? switch_fpu_return+0x4f/0xd0\n? syscall_exit_to_user_mode+0x72/0x220\n? do_syscall_64+0x8e/0x160\n? syscall_exit_to_user_mod\n---truncated---"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-46734\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-46734\nhttps://lore.kernel.org/linux-cve-announce/2024091830-CVE-2024-46734-9fe1@gregkh/T"
  ]
}