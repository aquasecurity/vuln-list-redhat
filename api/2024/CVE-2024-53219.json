{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Will not fix",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Will not fix",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-12-27T00:00:00Z",
  "bugzilla": {
    "description": "kernel: virtiofs: use pages instead of pointer for kernel direct IO",
    "id": "2334407",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2334407"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-20",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-53219",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nvirtiofs: use pages instead of pointer for kernel direct IO\nWhen trying to insert a 10MB kernel module kept in a virtio-fs with cache\ndisabled, the following warning was reported:\n------------[ cut here ]------------\nWARNING: CPU: 1 PID: 404 at mm/page_alloc.c:4551 ......\nModules linked in:\nCPU: 1 PID: 404 Comm: insmod Not tainted 6.9.0-rc5+ #123\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996) ......\nRIP: 0010:__alloc_pages+0x2bf/0x380\n......\nCall Trace:\n\u003cTASK\u003e\n? __warn+0x8e/0x150\n? __alloc_pages+0x2bf/0x380\n__kmalloc_large_node+0x86/0x160\n__kmalloc+0x33c/0x480\nvirtio_fs_enqueue_req+0x240/0x6d0\nvirtio_fs_wake_pending_and_unlock+0x7f/0x190\nqueue_request_and_unlock+0x55/0x60\nfuse_simple_request+0x152/0x2b0\nfuse_direct_io+0x5d2/0x8c0\nfuse_file_read_iter+0x121/0x160\n__kernel_read+0x151/0x2d0\nkernel_read+0x45/0x50\nkernel_read_file+0x1a9/0x2a0\ninit_module_from_file+0x6a/0xe0\nidempotent_init_module+0x175/0x230\n__x64_sys_finit_module+0x5d/0xb0\nx64_sys_call+0x1c3/0x9e0\ndo_syscall_64+0x3d/0xc0\nentry_SYSCALL_64_after_hwframe+0x4b/0x53\n......\n\u003c/TASK\u003e\n---[ end trace 0000000000000000 ]---\nThe warning is triggered as follows:\n1) syscall finit_module() handles the module insertion and it invokes\nkernel_read_file() to read the content of the module first.\n2) kernel_read_file() allocates a 10MB buffer by using vmalloc() and\npasses it to kernel_read(). kernel_read() constructs a kvec iter by\nusing iov_iter_kvec() and passes it to fuse_file_read_iter().\n3) virtio-fs disables the cache, so fuse_file_read_iter() invokes\nfuse_direct_io(). As for now, the maximal read size for kvec iter is\nonly limited by fc-\u003emax_read. For virtio-fs, max_read is UINT_MAX, so\nfuse_direct_io() doesn't split the 10MB buffer. It saves the address and\nthe size of the 10MB-sized buffer in out_args[0] of a fuse request and\npasses the fuse request to virtio_fs_wake_pending_and_unlock().\n4) virtio_fs_wake_pending_and_unlock() uses virtio_fs_enqueue_req() to\nqueue the request. Because virtiofs need DMA-able address, so\nvirtio_fs_enqueue_req() uses kmalloc() to allocate a bounce buffer for\nall fuse args, copies these args into the bounce buffer and passed the\nphysical address of the bounce buffer to virtiofsd. The total length of\nthese fuse args for the passed fuse request is about 10MB, so\ncopy_args_to_argbuf() invokes kmalloc() with a 10MB size parameter and\nit triggers the warning in __alloc_pages():\nif (WARN_ON_ONCE_GFP(order \u003e MAX_PAGE_ORDER, gfp))\nreturn NULL;\n5) virtio_fs_enqueue_req() will retry the memory allocation in a\nkworker, but it won't help, because kmalloc() will always return NULL\ndue to the abnormal size and finit_module() will hang forever.\nA feasible solution is to limit the value of max_read for virtio-fs, so\nthe length passed to kmalloc() will be limited. However it will affect\nthe maximal read size for normal read. And for virtio-fs write initiated\nfrom kernel, it has the similar problem but now there is no way to limit\nfc-\u003emax_write in kernel.\nSo instead of limiting both the values of max_read and max_write in\nkernel, introducing use_pages_for_kvec_io in fuse_conn and setting it as\ntrue in virtiofs. When use_pages_for_kvec_io is enabled, fuse will use\npages instead of pointer to pass the KVEC_IO data.\nAfter switching to pages for KVEC_IO data, these pages will be used for\nDMA through virtio-fs. If these pages are backed by vmalloc(),\n{flush|invalidate}_kernel_vmap_range() are necessary to flush or\ninvalidate the cache before the DMA operation. So add two new fields in\nfuse_args_pages to record the base address of vmalloc area and the\ncondition indicating whether invalidation is needed. Perform the flush\nin fuse_get_user_pages() for write operations and the invalidation in\nfuse_release_user_pages() for read operations.\nIt may seem necessary to introduce another fie\n---truncated---"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-53219\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-53219\nhttps://lore.kernel.org/linux-cve-announce/2024122733-CVE-2024-53219-1a04@gregkh/T"
  ]
}