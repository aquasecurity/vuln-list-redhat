{
  "affected_release": null,
  "package_state": null,
  "threat_severity": "Low",
  "public_date": "2024-07-29T00:00:00Z",
  "bugzilla": {
    "description": "kernel: io_uring: fix possible deadlock in io_register_iowq_max_workers()",
    "id": "2300457",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2300457"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-833",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-41080",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nio_uring: fix possible deadlock in io_register_iowq_max_workers()\nThe io_register_iowq_max_workers() function calls io_put_sq_data(),\nwhich acquires the sqd-\u003elock without releasing the uring_lock.\nSimilar to the commit 009ad9f0c6ee (\"io_uring: drop ctx-\u003euring_lock\nbefore acquiring sqd-\u003elock\"), this can lead to a potential deadlock\nsituation.\nTo resolve this issue, the uring_lock is released before calling\nio_put_sq_data(), and then it is re-acquired after the function call.\nThis change ensures that the locks are acquired in the correct\norder, preventing the possibility of a deadlock."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-41080\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-41080\nhttps://lore.kernel.org/linux-cve-announce/2024072926-CVE-2024-41080-6385@gregkh/T"
  ]
}