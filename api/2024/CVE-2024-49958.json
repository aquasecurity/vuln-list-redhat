{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-10-21T00:00:00Z",
  "bugzilla": {
    "description": "kernel: ocfs2: reserve space for inline xattr before attaching reflink tree",
    "id": "2320444",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2320444"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-49958",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nocfs2: reserve space for inline xattr before attaching reflink tree\nOne of our customers reported a crash and a corrupted ocfs2 filesystem. \nThe crash was due to the detection of corruption.  Upon troubleshooting,\nthe fsck -fn output showed the below corruption\n[EXTENT_LIST_FREE] Extent list in owner 33080590 claims 230 as the next free chain record,\nbut fsck believes the largest valid value is 227.  Clamp the next record value? n\nThe stat output from the debugfs.ocfs2 showed the following corruption\nwhere the \"Next Free Rec:\" had overshot the \"Count:\" in the root metadata\nblock.\nInode: 33080590   Mode: 0640   Generation: 2619713622 (0x9c25a856)\nFS Generation: 904309833 (0x35e6ac49)\nCRC32: 00000000   ECC: 0000\nType: Regular   Attr: 0x0   Flags: Valid\nDynamic Features: (0x16) HasXattr InlineXattr Refcounted\nExtended Attributes Block: 0  Extended Attributes Inline Size: 256\nUser: 0 (root)   Group: 0 (root)   Size: 281320357888\nLinks: 1   Clusters: 141738\nctime: 0x66911b56 0x316edcb8 -- Fri Jul 12 06:02:30.829349048 2024\natime: 0x66911d6b 0x7f7a28d -- Fri Jul 12 06:11:23.133669517 2024\nmtime: 0x66911b56 0x12ed75d7 -- Fri Jul 12 06:02:30.317552087 2024\ndtime: 0x0 -- Wed Dec 31 17:00:00 1969\nRefcount Block: 2777346\nLast Extblk: 2886943   Orphan Slot: 0\nSub Alloc Slot: 0   Sub Alloc Bit: 14\nTree Depth: 1   Count: 227   Next Free Rec: 230\n## Offset        Clusters       Block#\n0  0             2310           2776351\n1  2310          2139           2777375\n2  4449          1221           2778399\n3  5670          731            2779423\n4  6401          566            2780447\n.......          ....           .......\n.......          ....           .......\nThe issue was in the reflink workfow while reserving space for inline\nxattr.  The problematic function is ocfs2_reflink_xattr_inline().  By the\ntime this function is called the reflink tree is already recreated at the\ndestination inode from the source inode.  At this point, this function\nreserves space for inline xattrs at the destination inode without even\nchecking if there is space at the root metadata block.  It simply reduces\nthe l_count from 243 to 227 thereby making space of 256 bytes for inline\nxattr whereas the inode already has extents beyond this index (in this\ncase up to 230), thereby causing corruption.\nThe fix for this is to reserve space for inline metadata at the destination\ninode before the reflink tree gets recreated. The customer has verified the\nfix."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-49958\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-49958\nhttps://lore.kernel.org/linux-cve-announce/2024102131-CVE-2024-49958-1bc6@gregkh/T"
  ]
}