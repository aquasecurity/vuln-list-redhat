{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-01-11T00:00:00Z",
  "bugzilla": {
    "description": "kernel: block: Prevent potential deadlocks in zone write plug error recovery",
    "id": "2337115",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2337115"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "4.4",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-667",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-55642",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nblock: Prevent potential deadlocks in zone write plug error recovery\nZone write plugging for handling writes to zones of a zoned block\ndevice always execute a zone report whenever a write BIO to a zone\nfails. The intent of this is to ensure that the tracking of a zone write\npointer is always correct to ensure that the alignment to a zone write\npointer of write BIOs can be checked on submission and that we can\nalways correctly emulate zone append operations using regular write\nBIOs.\nHowever, this error recovery scheme introduces a potential deadlock if a\ndevice queue freeze is initiated while BIOs are still plugged in a zone\nwrite plug and one of these write operation fails. In such case, the\ndisk zone write plug error recovery work is scheduled and executes a\nreport zone. This in turn can result in a request allocation in the\nunderlying driver to issue the report zones command to the device. But\nwith the device queue freeze already started, this allocation will\nblock, preventing the report zone execution and the continuation of the\nprocessing of the plugged BIOs. As plugged BIOs hold a queue usage\nreference, the queue freeze itself will never complete, resulting in a\ndeadlock.\nAvoid this problem by completely removing from the zone write plugging\ncode the use of report zones operations after a failed write operation,\ninstead relying on the device user to either execute a report zones,\nreset the zone, finish the zone, or give up writing to the device (which\nis a fairly common pattern for file systems which degrade to read-only\nafter write failures). This is not an unreasonnable requirement as all\nwell-behaved applications, FSes and device mapper already use report\nzones to recover from write errors whenever possible by comparing the\ncurrent position of a zone write pointer with what their assumption\nabout the position is.\nThe changes to remove the automatic error recovery are as follows:\n- Completely remove the error recovery work and its associated\nresources (zone write plug list head, disk error list, and disk\nzone_wplugs_work work struct). This also removes the functions\ndisk_zone_wplug_set_error() and disk_zone_wplug_clear_error().\n- Change the BLK_ZONE_WPLUG_ERROR zone write plug flag into\nBLK_ZONE_WPLUG_NEED_WP_UPDATE. This new flag is set for a zone write\nplug whenever a write opration targetting the zone of the zone write\nplug fails. This flag indicates that the zone write pointer offset is\nnot reliable and that it must be updated when the next report zone,\nreset zone, finish zone or disk revalidation is executed.\n- Modify blk_zone_write_plug_bio_endio() to set the\nBLK_ZONE_WPLUG_NEED_WP_UPDATE flag for the target zone of a failed\nwrite BIO.\n- Modify the function disk_zone_wplug_set_wp_offset() to clear this\nnew flag, thus implementing recovery of a correct write pointer\noffset with the reset (all) zone and finish zone operations.\n- Modify blkdev_report_zones() to always use the disk_report_zones_cb()\ncallback so that disk_zone_wplug_sync_wp_offset() can be called for\nany zone marked with the BLK_ZONE_WPLUG_NEED_WP_UPDATE flag.\nThis implements recovery of a correct write pointer offset for zone\nwrite plugs marked with BLK_ZONE_WPLUG_NEED_WP_UPDATE and within\nthe range of the report zones operation executed by the user.\n- Modify blk_revalidate_seq_zone() to call\ndisk_zone_wplug_sync_wp_offset() for all sequential write required\nzones when a zoned block device is revalidated, thus always resolving\nany inconsistency between the write pointer offset of zone write\nplugs and the actual write pointer position of sequential zones."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-55642\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-55642\nhttps://lore.kernel.org/linux-cve-announce/2025011100-CVE-2024-55642-29a8@gregkh/T"
  ]
}