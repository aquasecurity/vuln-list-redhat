{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-11-05T17:10:48Z",
  "bugzilla": {
    "description": "kernel: btrfs: reject ro-\u003erw reconfiguration if there are hard ro requirements",
    "id": "2323936",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2323936"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-476",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-50118",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nbtrfs: reject ro-\u003erw reconfiguration if there are hard ro requirements\n[BUG]\nSyzbot reports the following crash:\nBTRFS info (device loop0 state MCS): disabling free space tree\nBTRFS info (device loop0 state MCS): clearing compat-ro feature flag for FREE_SPACE_TREE (0x1)\nBTRFS info (device loop0 state MCS): clearing compat-ro feature flag for FREE_SPACE_TREE_VALID (0x2)\nOops: general protection fault, probably for non-canonical address 0xdffffc0000000003: 0000 [#1] PREEMPT SMP KASAN NOPTI\nKASAN: null-ptr-deref in range [0x0000000000000018-0x000000000000001f]\nHardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014\nRIP: 0010:backup_super_roots fs/btrfs/disk-io.c:1691 [inline]\nRIP: 0010:write_all_supers+0x97a/0x40f0 fs/btrfs/disk-io.c:4041\nCall Trace:\n\u003cTASK\u003e\nbtrfs_commit_transaction+0x1eae/0x3740 fs/btrfs/transaction.c:2530\nbtrfs_delete_free_space_tree+0x383/0x730 fs/btrfs/free-space-tree.c:1312\nbtrfs_start_pre_rw_mount+0xf28/0x1300 fs/btrfs/disk-io.c:3012\nbtrfs_remount_rw fs/btrfs/super.c:1309 [inline]\nbtrfs_reconfigure+0xae6/0x2d40 fs/btrfs/super.c:1534\nbtrfs_reconfigure_for_mount fs/btrfs/super.c:2020 [inline]\nbtrfs_get_tree_subvol fs/btrfs/super.c:2079 [inline]\nbtrfs_get_tree+0x918/0x1920 fs/btrfs/super.c:2115\nvfs_get_tree+0x90/0x2b0 fs/super.c:1800\ndo_new_mount+0x2be/0xb40 fs/namespace.c:3472\ndo_mount fs/namespace.c:3812 [inline]\n__do_sys_mount fs/namespace.c:4020 [inline]\n__se_sys_mount+0x2d6/0x3c0 fs/namespace.c:3997\ndo_syscall_x64 arch/x86/entry/common.c:52 [inline]\ndo_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\nentry_SYSCALL_64_after_hwframe+0x77/0x7f\n[CAUSE]\nTo support mounting different subvolume with different RO/RW flags for\nthe new mount APIs, btrfs introduced two workaround to support this feature:\n- Skip mount option/feature checks if we are mounting a different\nsubvolume\n- Reconfigure the fs to RW if the initial mount is RO\nCombining these two, we can have the following sequence:\n- Mount the fs ro,rescue=all,clear_cache,space_cache=v1\nrescue=all will mark the fs as hard read-only, so no v2 cache clearing\nwill happen.\n- Mount a subvolume rw of the same fs.\nWe go into btrfs_get_tree_subvol(), but fc_mount() returns EBUSY\nbecause our new fc is RW, different from the original fs.\nNow we enter btrfs_reconfigure_for_mount(), which switches the RO flag\nfirst so that we can grab the existing fs_info.\nThen we reconfigure the fs to RW.\n- During reconfiguration, option/features check is skipped\nThis means we will restart the v2 cache clearing, and convert back to\nv1 cache.\nThis will trigger fs writes, and since the original fs has \"rescue=all\"\noption, it skips the csum tree read.\nAnd eventually causing NULL pointer dereference in super block\nwriteback.\n[FIX]\nFor reconfiguration caused by different subvolume RO/RW flags, ensure we\nalways run btrfs_check_options() to ensure we have proper hard RO\nrequirements met.\nIn fact the function btrfs_check_options() doesn't really do many\ncomplex checks, but hard RO requirement and some feature dependency\nchecks, thus there is no special reason not to do the check for mount\nreconfiguration."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-50118\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-50118\nhttps://git.kernel.org/stable/c/23724398b55d9570f6ae79dd2ea026fff8896bf1\nhttps://git.kernel.org/stable/c/3c36a72c1d27de6618c1c480c793d9924640f5bb"
  ]
}