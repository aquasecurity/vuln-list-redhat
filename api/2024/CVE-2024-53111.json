{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-12-02T00:00:00Z",
  "bugzilla": {
    "description": "kernel: mm/mremap: fix address wraparound in move_page_tables()",
    "id": "2329925",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2329925"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-190",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-53111",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nmm/mremap: fix address wraparound in move_page_tables()\nOn 32-bit platforms, it is possible for the expression `len + old_addr \u003c\nold_end` to be false-positive if `len + old_addr` wraps around. \n`old_addr` is the cursor in the old range up to which page table entries\nhave been moved; so if the operation succeeded, `old_addr` is the *end* of\nthe old region, and adding `len` to it can wrap.\nThe overflow causes mremap() to mistakenly believe that PTEs have been\ncopied; the consequence is that mremap() bails out, but doesn't move the\nPTEs back before the new VMA is unmapped, causing anonymous pages in the\nregion to be lost.  So basically if userspace tries to mremap() a\nprivate-anon region and hits this bug, mremap() will return an error and\nthe private-anon region's contents appear to have been zeroed.\nThe idea of this check is that `old_end - len` is the original start\naddress, and writing the check that way also makes it easier to read; so\nfix the check by rearranging the comparison accordingly.\n(An alternate fix would be to refactor this function by introducing an\n\"orig_old_start\" variable or such.)\nTested in a VM with a 32-bit X86 kernel; without the patch:\n```\nuser@horn:~/big_mremap$ cat test.c\n#define _GNU_SOURCE\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cerr.h\u003e\n#include \u003csys/mman.h\u003e\n#define ADDR1 ((void*)0x60000000)\n#define ADDR2 ((void*)0x10000000)\n#define SIZE          0x50000000uL\nint main(void) {\nunsigned char *p1 = mmap(ADDR1, SIZE, PROT_READ|PROT_WRITE,\nMAP_ANONYMOUS|MAP_PRIVATE|MAP_FIXED_NOREPLACE, -1, 0);\nif (p1 == MAP_FAILED)\nerr(1, \"mmap 1\");\nunsigned char *p2 = mmap(ADDR2, SIZE, PROT_NONE,\nMAP_ANONYMOUS|MAP_PRIVATE|MAP_FIXED_NOREPLACE, -1, 0);\nif (p2 == MAP_FAILED)\nerr(1, \"mmap 2\");\n*p1 = 0x41;\nprintf(\"first char is 0x%02hhx\\n\", *p1);\nunsigned char *p3 = mremap(p1, SIZE, SIZE,\nMREMAP_MAYMOVE|MREMAP_FIXED, p2);\nif (p3 == MAP_FAILED) {\nprintf(\"mremap() failed; first char is 0x%02hhx\\n\", *p1);\n} else {\nprintf(\"mremap() succeeded; first char is 0x%02hhx\\n\", *p3);\n}\n}\nuser@horn:~/big_mremap$ gcc -static -o test test.c\nuser@horn:~/big_mremap$ setarch -R ./test\nfirst char is 0x41\nmremap() failed; first char is 0x00\n```\nWith the patch:\n```\nuser@horn:~/big_mremap$ setarch -R ./test\nfirst char is 0x41\nmremap() succeeded; first char is 0x41\n```"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-53111\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-53111\nhttps://lore.kernel.org/linux-cve-announce/2024120248-CVE-2024-53111-eb9b@gregkh/T"
  ]
}