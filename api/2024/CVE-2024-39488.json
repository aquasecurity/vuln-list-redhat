{
  "affected_release": [
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "release_date": "2024-11-12T00:00:00Z",
      "advisory": "RHSA-2024:9315",
      "package": "kernel-0:5.14.0-503.11.1.el9_5",
      "cpe": "cpe:/a:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "release_date": "2024-11-12T00:00:00Z",
      "advisory": "RHSA-2024:9315",
      "package": "kernel-0:5.14.0-503.11.1.el9_5",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Will not fix",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Will not fix",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2024-07-10T00:00:00Z",
  "bugzilla": {
    "description": "kernel: arm64: asm-bug: Add .align 2 to the end of __BUG_ENTRY",
    "id": "2297057",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2297057"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "verified"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2024-39488",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\narm64: asm-bug: Add .align 2 to the end of __BUG_ENTRY\nWhen CONFIG_DEBUG_BUGVERBOSE=n, we fail to add necessary padding bytes\nto bug_table entries, and as a result the last entry in a bug table will\nbe ignored, potentially leading to an unexpected panic(). All prior\nentries in the table will be handled correctly.\nThe arm64 ABI requires that struct fields of up to 8 bytes are\nnaturally-aligned, with padding added within a struct such that struct\nare suitably aligned within arrays.\nWhen CONFIG_DEBUG_BUGVERPOSE=y, the layout of a bug_entry is:\nstruct bug_entry {\nsigned int      bug_addr_disp;// 4 bytes\nsigned int      file_disp;// 4 bytes\nunsigned short  line;// 2 bytes\nunsigned short  flags;// 2 bytes\n}\n... with 12 bytes total, requiring 4-byte alignment.\nWhen CONFIG_DEBUG_BUGVERBOSE=n, the layout of a bug_entry is:\nstruct bug_entry {\nsigned int      bug_addr_disp;// 4 bytes\nunsigned short  flags;// 2 bytes\n\u003c implicit padding \u003e// 2 bytes\n}\n... with 8 bytes total, with 6 bytes of data and 2 bytes of trailing\npadding, requiring 4-byte alginment.\nWhen we create a bug_entry in assembly, we align the start of the entry\nto 4 bytes, which implicitly handles padding for any prior entries.\nHowever, we do not align the end of the entry, and so when\nCONFIG_DEBUG_BUGVERBOSE=n, the final entry lacks the trailing padding\nbytes.\nFor the main kernel image this is not a problem as find_bug() doesn't\ndepend on the trailing padding bytes when searching for entries:\nfor (bug = __start___bug_table; bug \u003c __stop___bug_table; ++bug)\nif (bugaddr == bug_addr(bug))\nreturn bug;\nHowever for modules, module_bug_finalize() depends on the trailing\nbytes when calculating the number of entries:\nmod-\u003enum_bugs = sechdrs[i].sh_size / sizeof(struct bug_entry);\n... and as the last bug_entry lacks the necessary padding bytes, this entry\nwill not be counted, e.g. in the case of a single entry:\nsechdrs[i].sh_size == 6\nsizeof(struct bug_entry) == 8;\nsechdrs[i].sh_size / sizeof(struct bug_entry) == 0;\nConsequently module_find_bug() will miss the last bug_entry when it does:\nfor (i = 0; i \u003c mod-\u003enum_bugs; ++i, ++bug)\nif (bugaddr == bug_addr(bug))\ngoto out;\n... which can lead to a kenrel panic due to an unhandled bug.\nThis can be demonstrated with the following module:\nstatic int __init buginit(void)\n{\nWARN(1, \"hello\\n\");\nreturn 0;\n}\nstatic void __exit bugexit(void)\n{\n}\nmodule_init(buginit);\nmodule_exit(bugexit);\nMODULE_LICENSE(\"GPL\");\n... which will trigger a kernel panic when loaded:\n------------[ cut here ]------------\nhello\nUnexpected kernel BRK exception at EL1\nInternal error: BRK handler: 00000000f2000800 [#1] PREEMPT SMP\nModules linked in: hello(O+)\nCPU: 0 PID: 50 Comm: insmod Tainted: G           O       6.9.1 #8\nHardware name: linux,dummy-virt (DT)\npstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)\npc : buginit+0x18/0x1000 [hello]\nlr : buginit+0x18/0x1000 [hello]\nsp : ffff800080533ae0\nx29: ffff800080533ae0 x28: 0000000000000000 x27: 0000000000000000\nx26: ffffaba8c4e70510 x25: ffff800080533c30 x24: ffffaba8c4a28a58\nx23: 0000000000000000 x22: 0000000000000000 x21: ffff3947c0eab3c0\nx20: ffffaba8c4e3f000 x19: ffffaba846464000 x18: 0000000000000006\nx17: 0000000000000000 x16: ffffaba8c2492834 x15: 0720072007200720\nx14: 0720072007200720 x13: ffffaba8c49b27c8 x12: 0000000000000312\nx11: 0000000000000106 x10: ffffaba8c4a0a7c8 x9 : ffffaba8c49b27c8\nx8 : 00000000ffffefff x7 : ffffaba8c4a0a7c8 x6 : 80000000fffff000\nx5 : 0000000000000107 x4 : 0000000000000000 x3 : 0000000000000000\nx2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff3947c0eab3c0\nCall trace:\nbuginit+0x18/0x1000 [hello]\ndo_one_initcall+0x80/0x1c8\ndo_init_module+0x60/0x218\nload_module+0x1ba4/0x1d70\n__do_sys_init_module+0x198/0x1d0\n__arm64_sys_init_module+0x1c/0x28\ninvoke_syscall+0x48/0x114\nel0_svc\n---truncated---"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2024-39488\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-39488\nhttps://lore.kernel.org/linux-cve-announce/2024071013-CVE-2024-39488-f796@gregkh/T"
  ]
}